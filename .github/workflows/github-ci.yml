name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Python and pip
        run: sudo apt-get update && sudo apt-get install -y python3 python3-pip

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev
          sudo apt-get install -y libgl1-mesa-dev
          sudo apt-get install -y python3 python3-pip
          sudo apt-get install -y pkg-config systemd


      - name: Install Conan
        run: pip3 install conan

      - name: Setup Conan profile
        run: conan profile detect

      # ECS Build
      - name: Install Conan dependencies
        working-directory: Devops/ECS
        run: conan install . --build=missing -c tools.system.package_manager:mode=disabled

      - name: Build Docker image
        working-directory: Devops/ECS
        run: docker build -f Dockerfile.ecs -t ecs_image .

      - name: Build project inside Docker
        working-directory: Devops/ECS
        run: |
          docker run ecs_image cmake .
          docker run ecs_image make

      - name: Build ECS Project
        working-directory: Devops/ECS
        run: |
          docker run ecs_image cmake .
          docker run ecs_image make

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Test ECS
      - name: Run ECS tests
        working-directory: Devops/ECS
        run: docker run ecs_image ./run_tests.sh

      # Test Server
      - name: Build and test Server
        working-directory: Devops/Server
        run: |
          conan install . --build=missing
          docker build -f Dockerfile.server -t server_image .
          docker run server_image ./run_tests.sh

      # Test Client
      - name: Build and test Client
        working-directory: Devops/Client
        run: |
          conan install . --build=missing
          docker build -f Dockerfile.client -t client_image .
          docker run client_image ./run_tests.sh

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Deploy to Epitech repo
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "your_email@example.com"
          git remote add epitech git@github.com:EpitechPromo2027/B-CPP-500-NCE-5-2-rtype-leonard.oursel.git
          git push epitech main

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl -H "Content-Type: application/json" -X POST -d '{
            "content": null,
            "embeds": [{
              "title": "CI/CD Pipeline Passed",
              "description": "The CI/CD pipeline for **R-Type** has successfully passed, and the project has been deployed to the Epitech repo.",
              "color": 3066993,
              "fields": [
                {"name": "Stage", "value": "Deploy"},
                {"name": "Status", "value": "Success"}
              ],
              "footer": {"text": "CI/CD Notifications"},
              "timestamp": "'$(date --utc +%Y-%m-%dT%H:%M:%SZ)'"
            }]
          }' $DISCORD_WEBHOOK_URL
