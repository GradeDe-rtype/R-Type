name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Configure SSH
        run: |
         mkdir -p ~/.ssh
         echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
         chmod 600 ~/.ssh/id_rsa

      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          pip install conan
          git submodule update --init --recursive

      - name: Configure Conan for ECS
        run: |
          cd ECS/ECS/
          conan profile detect

      - name: Install Dependencies for ECS
        run: |
          cd ECS/ECS/
          mkdir build
          cd build
          conan install .. --output-folder=. --build=missing

      - name: Configure CMake for ECS
        run: |
          cd ECS/ECS/build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release

      - name: Build ECS
        run: |
          cd ECS/ECS/build
          cmake --build . --config Release
#
#      - name: Run Tests for ECS
#        run: |
#          cd ECS/ECS/build
#          ctest -C Release --output-on-failure

#      - name: Configure Conan for Server
#        run: |
#          cd Server/
#          conan profile detect
#
#      - name: Install Dependencies for Server
#        run: |
#          cd Server/
#          mkdir build
#          cd build
#          conan install .. --output-folder=. --build=missing
#
#      - name: Configure CMake for Server
#        run: |
#          cd Server/build
#          cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
#
#      - name: Build Server
#        run: |
#          cd Server/build
#          cmake --build . --config Release
#
#      - name: Run Tests for Server
#        run: |
#          cd Server/build
#          ctest -C Release --output-on-failure
#
#      - name: Configure Conan for Client
#        run: |
#          cd Client/
#          conan profile detect
#
#      - name: Install Dependencies for Client
#        run: |
#          cd Client/
#          mkdir build
#          cd build
#          conan install .. --output-folder=. --build=missing
#
#      - name: Configure CMake for Client
#        run: |
#          cd Client/build
#          cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
#
#      - name: Build Client
#        run: |
#          cd Client/build
#          cmake --build . --config Release
#
#      - name: Run Tests for Client
#        run: |
#          cd Client/build
#          ctest -C Release --output-on-failure

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          pip install conan

      - name: Configure Conan for ECS
        shell: bash
        run: |
          cd ECS/ECS/
          conan profile detect

      - name: Install Dependencies for ECS
        shell: bash
        run: |
          cd ECS/ECS/
          mkdir build
          cd build
          conan install .. --output-folder=. --build=missing

      - name: Configure CMake for ECS
        shell: bash
        run: |
          cd ECS/ECS/build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release

      - name: Build ECS
        shell: bash
        run: |
          cd ECS/ECS/build
          cmake --build . --config Release

#      - name: Run Tests for ECS
#        shell: bash
#        run: |
#          cd ECS/ECS/build
#          ctest -C Release --output-on-failure

#      - name: Configure Conan for Server
#        shell: bash
#        run: |
#          cd Server/
#          conan profile detect
#
#      - name: Install Dependencies for Server
#        shell: bash
#        run: |
#          cd Server/
#          mkdir build
#          cd build
#          conan install .. --output-folder=. --build=missing
#
#      - name: Configure CMake for Server
#        shell: bash
#        run: |
#          cd Server/build
#          cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
#
#      - name: Build Server
#        shell: bash
#        run: |
#          cd Server/build
#          cmake --build . --config Release
#
#      - name: Run Tests for Server
#        shell: bash
#        run: |
#          cd Server/build
#          ctest -C Release --output-on-failure
#
#      - name: Configure Conan for Client
#        shell: bash
#        run: |
#          cd Client/
#          conan profile detect
#
#      - name: Install Dependencies for Client
#        shell: bash
#        run: |
#          cd Client/
#          mkdir build
#          cd build
#          conan install .. --output-folder=. --build=missing
#
#      - name: Configure CMake for Client
#        shell: bash
#        run: |
#          cd Client/build
#          cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
#
#      - name: Build Client
#        shell: bash
#        run: |
#          cd Client/build
#          cmake --build . --config Release
#
#      - name: Run Tests for Client
#        shell: bash
#        run: |
#          cd Client/build
#          ctest -C Release --output-on-failure

#  mirror:
#    needs: [ build-linux, build-windows ]
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#
#      - name: Configure SSH
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
#          chmod 600 ~/.ssh/id_rsa
#
#      - name: Mirror Repository
#        run: |
#          git remote add mirror ${{ secrets.MIRROR_REPOSITORY_URL }}
#          git push --mirror mirror
#        env:
#          GIT_SSH_COMMAND: "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no"
#

  notify:
    runs-on: ubuntu-latest
    needs: [ build-linux, build-windows ]
    steps:
      - name: Read Test Results
        id: read-results
        run: |
          if [[ -f Devops/ECS/ECS/test_results.json ]]; then
            RESULTS=$(cat Devops/ECS/ECS/test_results.json)
          else
            RESULTS="[]"
          fi
          echo "::set-output name=results::$RESULTS"

      - name: Notify via Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          TEST_RESULTS="${{ steps.read-results.outputs.results }}"

          FIELDS=""
          STATUS="Success"

          while IFS= read -r line; do
            TEST_NAME=$(echo "$line" | jq -r '.name')
            TEST_STATUS=$(echo "$line" | jq -r '.status')
            TEST_DETAILS=$(echo "$line" | jq -r '.details')

            if [[ "$TEST_STATUS" == "Failure" ]]; then
              STATUS="Failure"
            fi

            FIELDS="${FIELDS},{\"name\": \"${TEST_NAME}\", \"value\": \"${TEST_STATUS} - ${TEST_DETAILS}\", \"inline\": true}"
          done < <(echo "$TEST_RESULTS" | jq -c '.[]')

          if [[ "$STATUS" == "Success" ]]; then
            COLOR=3066993
            TITLE="✅ All Tests Passed"
          else
            COLOR=15158332
            TITLE="❌ Some Tests Failed"
          fi

          curl -H "Content-Type: application/json" -X POST -d "{
            \"content\": null,
            \"embeds\": [{
              \"title\": \"$TITLE\",
              \"description\": \"**EPITECH-RType/Tests**\",
              \"color\": $COLOR,
              \"fields\": [${FIELDS#,*}],
              \"footer\": {\"text\": \"CI/CD Notifications\"},
              \"timestamp\": \"$(date --utc +%Y-%m-%dT%H:%M:%SZ)\"
            }]
          }" $DISCORD_WEBHOOK_URL


#jobs:
#  build-and-test:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [ubuntu-latest]
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      # Étapes pour Windows (commentées pour l'instant)
##      - name: Install Dependencies (Windows)
##        if: matrix.os == 'windows-latest'
##        run: |
##          choco source add -n community -s https://community.chocolatey.org/api/v2/
##          choco install -y cmake.install git curl llvm mingw
##          where clang-tidy || echo "clang-tidy not installed!"
##          where clang-format || echo "clang-format not installed!"
#
#      - name: Build Docker Image
#        if: matrix.os == 'ubuntu-latest'
#        working-directory: Devops/ECS
#        run: docker build -t ecs_image -f Dockerfile.ecs .
#
##      - name: Build Docker Image (Windows)
##        if: matrix.os == 'windows-latest'
##        working-directory: Devops/ECS
##        run: docker build -t ecs_image -f Dockerfile.windows.ecs .
#
#      - name: Run ECS Tests
#        if: matrix.os == 'ubuntu-latest'
#        working-directory: Devops/ECS
#        run: |
#          docker run ecs_image bash -c "../run_tests.sh"
#
#      # Étape 4 : Tests pour Server (commenté pour le moment)
#      # - name: Build Docker Image for Server
#      #   if: matrix.os == 'ubuntu-latest'
#      #   working-directory: Devops/Server
#      #   run: docker build -t server_image -f Dockerfile.server .
#
#      # - name: Run Server Tests
#      #   working-directory: Devops/Server
#      #   run: |
#      #     docker run server_image bash -c "./run_tests.sh"
#
#      # Étape 5 : Tests pour Client (commenté pour le moment)
#      # - name: Build Docker Image for Client
#      #   if: matrix.os == 'ubuntu-latest'
#      #   working-directory: Devops/Client
#      #   run: docker build -t client_image -f Dockerfile.client .
#
#      # - name: Run Client Tests
#      #   working-directory: Devops/Client
#      #   run: |
#      #     docker run client_image bash -c "./run_tests.sh"
#
#  deploy:
#    runs-on: ubuntu-latest
#    needs: build-and-test
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Configure SSH
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
#          chmod 600 ~/.ssh/id_rsa
#          eval "$(ssh-agent -s)"
#          ssh-add ~/.ssh/id_rsa
#          ssh-keyscan github.com >> ~/.ssh/known_hosts
#
#      - name: Configure Git Identity
#        run: |
#          git config --global user.name "GitHub Actions"
#          git config --global user.email "actions@github.com"
#
#      - name: Force Push Branch to Epitech Repo
#        run: |
#          git remote remove epitech || true
#          git remote add epitech git@github.com:EpitechPromo2027/B-CPP-500-NCE-5-2-rtype-leonard.oursel.git
#          git fetch epitech main || true
#          git reset --hard epitech/main || true
#          git push --force epitech main
