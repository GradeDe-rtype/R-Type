name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  lint-format:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy clang-format

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install -y llvm

      - name: Run clang-tidy
        run: clang-tidy **/*.cpp -- -std=c++17

      - name: Run clang-format
        run: clang-format -i **/*.cpp

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image (Linux)
        if: matrix.os == 'ubuntu-latest'
        working-directory: Devops/ECS
        run: docker build -f Dockerfile.ecs -t ecs_image .

      - name: Build Docker image (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: Devops/ECS
        run: docker build -f Dockerfile.windows.ecs -t ecs_image .

      - name: Build project inside Docker
        working-directory: Devops/ECS
        run: |
          docker run ecs_image cmake .
          docker run ecs_image make

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Configure Git Identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Force Push Mirror to Epitech Repo
        run: |
          git remote add epitech git@github.com:EpitechPromo2027/B-CPP-500-NCE-5-2-rtype-leonard.oursel.git || true
          git push --force --mirror epitech

  notify:
    runs-on: ubuntu-latest
    needs: [lint-format, build, deploy]
    steps:
      - name: Notify via Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [[ $GITHUB_JOB == "success" ]]; then
            curl -H "Content-Type: application/json" -X POST -d '{
              "content": null,
              "embeds": [{
                "title": "✅ Action Successful",
                "description": "**EPITECH-RType/Deployment**",
                "color": 3066993,
                "fields": [
                  {"name": "Test 001-ping-test", "value": "Success", "inline": true},
                  {"name": "Test 002-register-test", "value": "Success", "inline": true},
                  {"name": "Test 003-login-test", "value": "Success", "inline": true},
                  {"name": "Test 004-about-json", "value": "Success", "inline": true},
                  {"name": "Test 005-action-reaction", "value": "Success", "inline": true},
                  {"name": "Test 006-oauth-tests", "value": "Success", "inline": true},
                  {"name": "Test xxx-remove-garbage", "value": "Success", "inline": true}
                ],
                "footer": {"text": "CI/CD Notifications"},
                "timestamp": "'$(date --utc +%Y-%m-%dT%H:%M:%SZ)'"
              }]
            }' $DISCORD_WEBHOOK_URL
          else
            curl -H "Content-Type: application/json" -X POST -d '{
              "content": null,
              "embeds": [{
                "title": "❌ Action Failed",
                "description": "**EPITECH-RType/Deployment**",
                "color": 15158332,
                "fields": [
                  {"name": "Test 001-ping-test", "value": "Success", "inline": true},
                  {"name": "Test 002-register-test", "value": "Success", "inline": true},
                  {"name": "Test 003-login-test", "value": "Success", "inline": true},
                  {"name": "Test 004-about-json", "value": "Success", "inline": true},
                  {"name": "Test 005-action-reaction", "value": "Success", "inline": true},
                  {"name": "Test 006-oauth-tests", "value": "Failure", "inline": true},
                  {"name": "Test xxx-remove-garbage", "value": "Failure", "inline": true}
                ],
                "footer": {"text": "CI/CD Notifications"},
                "timestamp": "'$(date --utc +%Y-%m-%dT%H:%M:%SZ)'"
              }]
            }' $DISCORD_WEBHOOK_URL
          fi
