name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  lint-format:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy clang-format

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install -y llvm --timeout=600

      - name: Run clang-tidy (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: find Devops/ECS -name "*.cpp" -exec clang-tidy {} -- -std=c++17 \;

      - name: Run clang-tidy (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Get-ChildItem -Path .\Devops\ECS\ -Recurse -Filter *.cpp | ForEach-Object { clang-tidy $_.FullName -- -std=c++17 -I.\build\conan\include }

      - name: Run clang-format (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: find Devops/ECS -name "*.cpp" -exec clang-format -i {} \;

      - name: Run clang-format (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Get-ChildItem -Path .\Devops\ECS\ -Recurse -Filter *.cpp | ForEach-Object { clang-format -i $_.FullName }

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image (Linux)
        if: matrix.os == 'ubuntu-latest'
        working-directory: Devops/ECS
        run: |
          docker build -f Dockerfile.ecs -t ecs_image .
          docker run ecs_image bash -c "dpkg --list | grep 'build-essential'"

      - name: Build Docker image (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: Devops/ECS
        run: docker build -f Dockerfile.windows.ecs -t ecs_image .

      - name: Configure and Build Project (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p Devops/ECS/build
          cd Devops/ECS/build
          conan install .. --build=missing -c tools.system.package_manager:mode=install
          cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          make

      - name: Configure and Build Project (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir Devops\ECS\build
          cd Devops\ECS\build
          conan install .. --build=missing -c tools.system.package_manager:mode=install
          cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          cmake --build .

      - name: Debug build directory (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          ls -la Devops/ECS/build/
          cat Devops/ECS/build/CMakeCache.txt

      - name: Capture Test Results
        working-directory: Devops/ECS
        run: docker run ecs_image bash -c "./run_tests.sh > test_results.json || true"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Configure Git Identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Force Push Mirror to Epitech Repo
        run: |
          git remote add epitech git@github.com:EpitechPromo2027/B-CPP-500-NCE-5-2-rtype-leonard.oursel.git || true
          git push --force --mirror epitech

  notify:
    runs-on: ubuntu-latest
    needs: [lint-format, build, deploy]
    steps:
      - name: Read Test Results
        id: read-results
        run: |
          if [[ -f Devops/ECS/test_results.json ]]; then
            RESULTS=$(cat Devops/ECS/test_results.json)
          else
            RESULTS="[]"
          fi
          echo "::set-output name=results::$RESULTS"

      - name: Notify via Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          TEST_RESULTS="${{ steps.read-results.outputs.results }}"

          FIELDS=""
          STATUS="Success"

          while IFS= read -r line; do
            TEST_NAME=$(echo "$line" | jq -r '.name')
            TEST_STATUS=$(echo "$line" | jq -r '.status')
            TEST_DETAILS=$(echo "$line" | jq -r '.details')

            if [[ "$TEST_STATUS" == "Failure" ]]; then
              STATUS="Failure"
            fi

            FIELDS="${FIELDS},{\"name\": \"${TEST_NAME}\", \"value\": \"${TEST_STATUS} - ${TEST_DETAILS}\", \"inline\": true}"
          done < <(echo "$TEST_RESULTS" | jq -c '.[]')

          if [[ "$STATUS" == "Success" ]]; then
            COLOR=3066993
            TITLE="✅ All Tests Passed"
          else
            COLOR=15158332
            TITLE="❌ Some Tests Failed"
          fi

          curl -H "Content-Type: application/json" -X POST -d "{
            \"content\": null,
            \"embeds\": [{
              \"title\": \"$TITLE\",
              \"description\": \"**EPITECH-RType/Tests**\",
              \"color\": $COLOR,
              \"fields\": [${FIELDS#,*}],
              \"footer\": {\"text\": \"CI/CD Notifications\"},
              \"timestamp\": \"$(date --utc +%Y-%m-%dT%H:%M:%SZ)\"
            }]
          }" $DISCORD_WEBHOOK_URL
