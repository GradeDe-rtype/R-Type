# FROM mcr.microsoft.com/windows/servercore:ltsc2022

# SHELL ["powershell", "-Command"]

# RUN Set-ExecutionPolicy Bypass -Scope Process -Force; \
#     [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; \
#     Invoke-WebRequest -Uri https://chocolatey.org/install.ps1 -UseBasicParsing | Invoke-Expression; \
#     choco install -y python3 cmake.install git curl

#     RUN Invoke-WebRequest -Uri https://aka.ms/vs/17/release/vs_buildtools.exe -OutFile vs_buildtools.exe; \
#     Start-Process -FilePath .\vs_buildtools.exe -ArgumentList '--quiet', '--wait', '--norestart', '--nocache', \
#     '--installPath', 'C:\BuildTools', \
#     '--add', 'Microsoft.VisualStudio.Workload.VCTools', \
#     '--add', 'Microsoft.VisualStudio.Workload.MSBuildTools', \
#     '--add', 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64' -Wait; \
#     Remove-Item -Force vs_buildtools.exe


# RUN python -m pip install --upgrade pip; \
#     python -m pip install conan

# RUN conan profile detect --force

# WORKDIR C:/tmp

# COPY conanfile.windows.txt C:/tmp/conanfile.txt

# RUN conan install . --output-folder=C:/tmp/build/conan --build=missing -c tools.system.package_manager:mode=install

# WORKDIR C:/ECS

# COPY . C:/ECS

# WORKDIR C:/ECS/build

# # RUN powershell -Command "mkdir build; cd build; g++ -std=c++20 ../test_main.cpp -o test_main.exe -IC:/tmp/build/conan/include -LC:/tmp/build/conan/lib; ./test_main.exe"
FROM mcr.microsoft.com/windows/servercore:ltsc2022

SHELL ["powershell", "-Command"]

# Installer Chocolatey et Python
RUN Set-ExecutionPolicy Bypass -Scope Process -Force; \
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; \
    Invoke-WebRequest -Uri https://chocolatey.org/install.ps1 -UseBasicParsing | Invoke-Expression; \
    choco install -y python3 cmake.install git curl

# Ajouter Python manuellement au PATH
RUN $pythonDir = Get-ChildItem -Path 'C:\ProgramData\chocolatey\lib\python3\tools' | Where-Object { $_.PSIsContainer } | Select-Object -ExpandProperty FullName; \
    if (!$pythonDir) { throw 'Python directory introuvable après installation'; } \
    setx PATH "$pythonDir;%PATH%"; \
    Write-Host "Python ajouté au PATH : $pythonDir"; \
    python --version || throw 'Python non accessible après mise à jour du PATH'

# Installer Visual Studio Build Tools
RUN Invoke-WebRequest -Uri https://aka.ms/vs/17/release/vs_buildtools.exe -OutFile vs_buildtools.exe; \
    Start-Process -FilePath .\vs_buildtools.exe -ArgumentList '--quiet', '--wait', '--norestart', '--nocache', \
    '--installPath', 'C:\BuildTools', \
    '--add', 'Microsoft.VisualStudio.Workload.VCTools', \
    '--add', 'Microsoft.VisualStudio.Workload.MSBuildTools', \
    '--add', 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64' -Wait; \
    Remove-Item -Force vs_buildtools.exe

# Ajouter Visual Studio Compiler au PATH
ENV PATH="C:\\BuildTools\\VC\\Tools\\MSVC\\14.35.32215\\bin\\Hostx64\\x64;%PATH%"

# Installer Conan
RUN python -m pip install --upgrade pip; \
    python -m pip install conan

# Détecter le profil Conan
RUN conan profile detect --force

# Copier les fichiers et installer les dépendances Conan
WORKDIR C:/tmp

COPY conanfile.windows.txt C:/tmp/conanfile.txt

RUN conan install . --output-folder=C:/tmp/build/conan --build=missing -c tools.system.package_manager:mode=install

# Copier le code source
WORKDIR C:/ECS

COPY . C:/ECS

# Étape de build et de test
WORKDIR C:/ECS/build

RUN powershell -Command \
    "C:\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat; \
    echo '=== Recherche du compilateur ==='; \
    if (!(where cl)) { throw 'cl non trouvé dans le PATH'; } \
    echo 'cl trouvé, configuration avec CMake...'; \
    cmake .. -G \"Visual Studio 17 2022\" -A x64 -DCMAKE_TOOLCHAIN_FILE=C:/tmp/build/conan/conan_toolchain.cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON; \
    cmake --build .; \
    echo 'Compilation terminée avec succès';"

CMD ["cmd", "/C", "echo All tests completed!"]
